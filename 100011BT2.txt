// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MerkleTree {
    bytes32[] public leaves; // Store the leaves of the Merkle Tree
    bytes32 public root; // Root hash of the Merkle Tree

    // Add a leaf to the Merkle Tree
    function addLeaf(string memory leaf) public {
        bytes32 Leaf = keccak256(abi.encodePacked(leaf)); // Hash the leaf
        leaves.push(Leaf); // Add the hashed leaf to the leaves array
    }

    // Function to calculate the root of the Merkle Tree
    function calculateRoot() public {
        require(leaves.length > 0, "No leaves added"); // Ensure there are leaves to calculate the root
       
        bytes32[] memory nodes = leaves; // Copy leaves to nodes

        // Repeatedly hash pairs of nodes until we reach the root
        while (nodes.length > 1) {
            uint newLength = (nodes.length + 1) / 2; // Calculate the new length for the next level of nodes
            bytes32[] memory newNodes = new bytes32[](newLength);

            for (uint i = 0; i < nodes.length; i += 2) {
                // Hash pairs of nodes
                if (i + 1 < nodes.length) {
                    newNodes[i / 2] = keccak256(abi.encodePacked(nodes[i], nodes[i + 1]));
                } else {
                    newNodes[i / 2] = nodes[i]; // If there's an odd number of nodes, carry the last one up
                }
            }
            nodes = newNodes; // Update nodes with the newly hashed nodes
        }

        root = nodes[0]; // The final hash is the Merkle root
    }

    // Verify a Merkle Proof
    function verifyProof(
        string memory Leaf, // Value to be checked
        bytes32[] memory proof, // Array of all nodes in the proof
        bytes32 expectedRoot, // Expected hash value of root node
        uint index // Position of the Leaf in the Merkle Tree
    ) public pure returns (bool) {
        bytes32 leaf = keccak256(abi.encodePacked(Leaf)); // Hash the leaf
        bytes32 hash = leaf;

        // Rebuild the hash from the proof
        for (uint i = 0; i < proof.length; i++) {
            if (index % 2 == 0) {
                hash = keccak256(abi.encodePacked(hash, proof[i])); // Hash the leaf with the proof node
            } else {
                hash = keccak256(abi.encodePacked(proof[i], hash)); // Hash the proof node with the leaf
            }
            index = index / 2; // Move to the parent node
        }

        return hash == expectedRoot; // Return true if the rebuilt hash matches the expected root
    }

    // Retrieve the Merkle root
    function getRoot() public view returns (bytes32) {
        return root; // Return the current Merkle root
    }
}
