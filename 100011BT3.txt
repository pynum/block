// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DecentralizedBank {
    // Mapping of user addresses to their Ether balances
    mapping(address => uint) private balances;

    // Event to log successful deposits
    event Deposit(address indexed user, uint amount);

    // Event to log successful withdrawals
    event Withdrawal(address indexed user, uint amount);

    // Deposit function (payable): Allows users to deposit Ether into the bank
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);  // Emit deposit event
    }

    // Withdraw function: Allows users to withdraw Ether from their balance
    function withdraw(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        // Deduct the amount from the user's balance
        balances[msg.sender] -= _amount;
        // Transfer Ether to the user
        payable(msg.sender).transfer(_amount);
        emit Withdrawal(msg.sender, _amount);  // Emit withdrawal event
    }

    // Function to check the user's balance
    function getBalance() public view returns (uint) {
        return balances[msg.sender];
    }
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Decentralized Bank</title>
</head>
<body>
    <h1>Decentralized Bank</h1>
    <div>
        <label>Deposit Amount (in Ether):</label>
        <input type="number" id="depositAmount" step="0.01" />
        <button onclick="deposit()">Deposit</button>
    </div>
    <div>
        <label>Withdraw Amount (in Ether):</label>
        <input type="number" id="withdrawAmount" step="0.01" />
        <button onclick="withdraw()">Withdraw</button>
    </div>
    <div>
        <button onclick="getBalance()">Check Balance</button>
        <p id="balance"></p>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <script>
        // MetaMask provider
        const web3 = new Web3(window.ethereum);
        
        // Contract ABI (replace with the actual ABI from your compiled contract)
        const contractABI = [
            // Add ABI here
        ];

        // Contract address (replace with the actual address after deployment)
        const contractAddress = 'YOUR_CONTRACT_ADDRESS';
        const bankContract = new web3.eth.Contract(contractABI, contractAddress);

        // Request MetaMask account access
        async function requestAccount() {
            if (window.ethereum) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
            } else {
                alert('Please install MetaMask');
            }
        }

        // Deposit Ether into the bank
        async function deposit() {
            const amount = document.getElementById("depositAmount").value;
            if (!amount || amount <= 0) {
                alert('Please enter a valid deposit amount');
                return;
            }
            await requestAccount(); // Request account access
            const accounts = await web3.eth.getAccounts();
            const value = web3.utils.toWei(amount, 'ether');
            await bankContract.methods.deposit().send({
                from: accounts[0],
                value: value
            });
            alert('Deposit successful!');
        }

        // Withdraw Ether from the bank
        async function withdraw() {
            const amount = document.getElementById("withdrawAmount").value;
            if (!amount || amount <= 0) {
                alert('Please enter a valid withdrawal amount');
                return;
            }
            await requestAccount(); // Request account access
            const accounts = await web3.eth.getAccounts();
            const value = web3.utils.toWei(amount, 'ether');
            await bankContract.methods.withdraw(value).send({
                from: accounts[0]
            });
            alert('Withdrawal successful!');
        }

        // Check balance
        async function getBalance() {
            await requestAccount(); // Request account access
            const accounts = await web3.eth.getAccounts();
            const balance = await bankContract.methods.getBalance().call({ from: accounts[0] });
            document.getElementById("balance").innerText = web3.utils.fromWei(balance, 'ether') + ' ETH';
        }
    </script>
</body>
</html>
